from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import general_draw_module as dm
import general_loop_module as lm
import general_alg_module as am
import settings as s
import base64


class PrettyWidget(QWidget):

    def __init__(self):
        super(PrettyWidget, self).__init__()
        font = QFont()
        font.setPointSize(16)
        self.initUI()

    def create_exit_action(self):
        exit_string = b'iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAAAZlBMVEX///8AAAC7u7tra2vIyMiGhoZLS0ulpaXc3Nzi4uKenp7Pz8+0tLTr6+vy8vIzMzM8PDxRUVHo6OgjIyONjY1DQ0P5+flUVFQdHR03NzfBwcEPDw8ICAgXFxdhYWEVFRWBgYF3d3eWMxUFAAAD3UlEQVR4nO3di04bQQwF0EzLK6QBGgoNr9L+/0+WClVluzuzM7P22te6/gHryL54UBTYbN4rua3PG5myduSLQgoptC8KKaTQviikkEL7WkN4txNqUlknqwtT+rqq0UK4rtFGuKbRSrheHu2Eb3M8EWpXLEthSt9XMNoKUzpT31Vrob7RXqidRw9CXaMPoebt8CLUewP4EWoZPQl1jL6EGnn0JpT/uepPKP2W8yiUfef4FEoavQrlfq76FUoZPQtlbodvocTt8C58ux0L5+hfuPTnKoJwWR4xhEvyiCJM6TG88BOFFFJIIYUUUkghhRRSCCo8XEQXbtM+vLCXCCQ8bqML0+0hujA99SwqlDA9d0wRS5hu27MIJkzH5imiCduPBp7wpXGKeMLWowEoTC9Ni+pX+CMrTKllip6EV7uPNfxlYihsecB5EpZqKGzJIqgwPVdnEVWYnmqnCCusfsDhCmsfcMDCygcctLBqitDCqqOBLUyv84sKLqx4wMELZ48GvHA2iyjCQ6FfOYv6wsefpwL1q9Cv/IDTF15qtBhWMYsaDVcXpmNhUTX6rS8sZVGjm4Uw/1u/RjcLYf5oaDQzEWY/ttHoZSPMfWyj0cpImDkaGp2shNNZ1GhkJpw8GhptDIWv4ylqtDEUTiyqRhdL4fjDN40mpsJ0E114cxVcOAJGE16PgMGE1/cjYCzheEWDCR+mgJGEUysaSvgwDYwjnMxgJOHEmYglzGQwjjC7olGE02diNeHuXKK+FfoVVnQVoUwVPnvKnQkwYf7zw1IGQwjzZyKIsJzBAMK5FYUXVgCxhbMZRBfOZxBcWLOi0MLiUy2CsG5FgYUzTzV8YWUGvQkPXz7W8A9qDYVVZ8KhsPo7M9UZ9C3Mf++pYUUxhW1AQGFLBiGFTRlEFDauKJ6w9qkGK2xeUTRh/VMNVNieQTBh65mAE/ZkEEl4cds3QRzhvutv0yAJ+4tCCimkkEIKKaSQQgoppJBCCimkkEIKKaSQQgopzNfl9qKntucwQpmikEIK7YtCCim0LwoppNC+PAsfzgTq7lRIuC99Dbyzev/zuFZdiRs1vhW0rO5Powul5+hRKJtHn8K3OYrtqleh3K76FUrtqmehjNG3UCKP3oXL8+hfuHRXEYTL5oghXPKWQxH2zxFH2JtHJGHf7cAS9uwqmrB9V/GErXNEFLbdDkxhyxxRhfV5xBXW3g5kYZ0RW1hjRBfO5xFfODfHCMLy7YghLO1qFGF+jnGEubdcJOH0HGMJp/IYTTi+HfGE/+9qROFwV2MKPxqjCv/lMa7wbx4jC993Nbbwzxx9CH8DcsB9CofuM50AAAAASUVORK5CYII='
        pm = QPixmap()
        i = QIcon()
        pm.loadFromData(base64.b64decode(exit_string))
        i.addPixmap(pm)
        exitAction = QAction(i, '&Exit', self)
        exitAction.setShortcut('Ctrl+Q')
        exitAction.setStatusTip('Exit application')
        exitAction.triggered.connect(qApp.quit)
        return exitAction

    def create_import_action(self):
        import_action = QAction('&Import', self)
        import_action.setShortcut('Ctrl+I')
        import_action.setStatusTip('Import file')
        import_action.triggered.connect(self.import_process)
        return import_action

    def create_draw_graph_action(self):
        draw_graph_action = QAction('&Draw Graph', self)
        draw_graph_action.setShortcut('Ctrl+D')
        draw_graph_action.setStatusTip('Draw Graph')
        draw_graph_action.triggered.connect(lambda: dm.draw_graph(self))
        # draw_graph_action.triggered.connect(lambda: self.draw_graph())
        return draw_graph_action

    def create_toggle_text_action(self):
        toggle_text_action = QAction('&Toggle Output', self)
        toggle_text_action.setShortcut('Ctrl+O')
        toggle_text_action.setStatusTip('Toggle Output')
        toggle_text_action.triggered.connect(self.toggle_console)
        return toggle_text_action

    def create_floyd_action(self):
        floyd_action = QAction('&Floyd Algorithm', self)
        floyd_action.setShortcut('Ctrl+F')
        floyd_action.setStatusTip('Floyd Algorithm')
        floyd_action.triggered.connect(lambda: am.dum_dum_floyd_alg(self))
        return floyd_action

    def create_generic_action(self, name, trigger_function, needs_arguments, description=None, shortcut=None):
        action = QAction('&' + str(name), self)
        action.setStatusTip(str(name))
        if shortcut:
            action.setShortcut(str(shortcut))
        action.triggered.connect(lambda: self.create_generic_trigger_func(trigger_function, needs_arguments, name, description))
        return action

    def create_generic_trigger_func(self, trigger_function, needs_arguments, name, description=None):
        if needs_arguments:
            desc = 'Please provide the arguments(separated by space):'
            if description:
                desc = description
            args, done1 = QInputDialog.getText(self, name, desc)
            if done1:
                trigger_function = trigger_function + ' ' + args
        lm.process_raw_input(self, trigger_function)

    def toggle_console(self):
        if self.console_output.isHidden():
            self.console_output.setHidden(False)
        else:
            self.console_output.setHidden(True)

    def import_process(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        fileName, _ = QFileDialog.getOpenFileName(self, "QFileDialog.getOpenFileName()", "",
                                                  "All Files (*);;Python Files (*.py)", options=options)
        if fileName:
            lm.process_raw_input(self, 'import ' + str(fileName))

    def initUI(self):
        icon_string = b'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'
        self.setGeometry(100, 100, 800, 600)
        self.center()
        self.setWindowTitle('SP Finder')
        pm = QPixmap()
        i = QIcon()
        pm.loadFromData(base64.b64decode(icon_string))
        i.addPixmap(pm)
        self.setWindowIcon(i)
        self.showMaximized()

        grid = QGridLayout()
        self.setLayout(grid)

        self.menubar = QMenuBar(self)
        self.menubar.setFixedHeight(30)
        grid.addWidget(self.menubar, 0, 0)
        # now THIS creates a menu btn File, but it does nothing y yet
        app_menu = self.menubar.addMenu('&App')
        file_menu = self.menubar.addMenu('&File')
        utils_menu = self.menubar.addMenu('&Utils')
        graph_menu = self.menubar.addMenu('&Graph')
        actions_menu = self.menubar.addMenu('&Actions')
        # this adds an option, allows to leave and shows the shortcut
        app_menu.addAction(self.create_exit_action())
        # file menu has import, save
        file_menu.addAction(self.create_import_action())
        file_menu.addAction(self.create_generic_action('Save graph', 'save', True, '[json/gexf/image] [new file name]'))
        # graph menu has draw, add, set, swap, remove functios
        graph_menu.addAction(self.create_draw_graph_action())
        graph_menu.addAction(self.create_generic_action('Add p-node', 'add pnode', True, '[nodename] [x coordinates] [y coordinates]'))
        graph_menu.addAction(self.create_generic_action('Add node', 'add node', True, '[nodename]'))
        graph_menu.addAction(self.create_generic_action('Add edge', 'add edge', True, '[node1] [node2] (weight)'))
        graph_menu.addAction(self.create_generic_action('Set node color', 'set node color', True, '[nodename] [color] ; please use standard colors.'))
        graph_menu.addAction(self.create_generic_action('Set node position', 'set npos', True, '[nodename] [x coordinates] [y coordinates]'))
        graph_menu.addAction(self.create_generic_action('Set edge weight', 'set edge weight', True, '[node1] [node2] (weight)'))
        graph_menu.addAction(self.create_generic_action('Swap colors', 'swap colors', True, '[color1] [color2]'))
        graph_menu.addAction(self.create_generic_action('Remove node', 'remove node', True, '[nodename]'))
        graph_menu.addAction(self.create_generic_action('Remove edge', 'remove edge', True, '[node1] [node2]'))
        # action menu has weight proportion, floyd, shmoys (+todo add cycles)... toggle?!...
        actions_menu.addAction(self.create_toggle_text_action())
        actions_menu.addAction(self.create_floyd_action())
        actions_menu.addAction(self.create_generic_action('Shmoys Algorithm', 'shmoys', True, '[warehouse nr.] [starting radius] [starting node/None]', shortcut='Ctrl+S'))
        actions_menu.addAction(self.create_generic_action('Cycled Shmoys Algorithm', 'cshmoys', True, '[warehouse nr.] [starting radius] [starting node/None] [cycles]'))
        actions_menu.addAction(self.create_generic_action('Set weight proportion', 'set weight proportion', True, '[node1] [node2] [actual distance]'))
        # utils menu. drawstyle, show weights,reset plot, prints, help, convert, get distances
        utils_menu.addAction(self.create_generic_action('Set drawstyle', 'drawstyle', True, '[planar/shell/spring/spectral/random/circular/none(preferred)]'))
        utils_menu.addAction(self.create_generic_action('Show edge weights', 'show weights', True, '[on/off]'))
        utils_menu.addAction(self.create_generic_action('Reset plot', 'reset plot', False, shortcut='Ctrl+R'))
        utils_menu.addAction(self.create_generic_action('Print node info', 'print one', True, '[nodename]'))
        utils_menu.addAction(self.create_generic_action('Print nodes info', 'print nodes', False))
        utils_menu.addAction(self.create_generic_action('Print edges info', 'print edges', False))
        utils_menu.addAction(self.create_generic_action('Print current drawstyle', 'print style', False))
        utils_menu.addAction(self.create_generic_action('Help (mostly for terminal)', 'help', False))
        utils_menu.addAction(self.create_generic_action('Convert distances', 'convert', True, '[coord dist/metric] [value]; example: convert__ dist 500'))
        # utils_menu.addAction(self.create_generic_action('Get distance between 2 points', 'get dist', True, '[x1 coordinates] [y1 coordinates] [x2 coordinates] [y2 coordinates]'))
        utils_menu.addAction(self.create_generic_action('Get distance between 2 nodes', 'get node dist', True, '[node1] [node2]'))
        # adding all the menus.

        self.figure = s.plt.figure()
        self.canvas = FigureCanvas(self.figure)
        dm.set_mouse_listener(self)
        # grid.addLayout(buttonLayout, 1, 0)
        grid.addWidget(self.canvas, 1, 0)
        self.argtextbox = QLineEdit(self)
        self.argtextbox.setFont(QFont('Arial', 12))
        grid.addWidget(self.argtextbox, 2, 0)

        # text console output
        self.console_output = QTextBrowser(self)
        self.console_output.setGeometry(QRect(10, 90, 331, 111))
        self.console_output.setObjectName("output")
        self.console_output.setFont(QFont('Arial', 12))
        self.console_output.setStyleSheet('background-color: grey;')
        grid.addWidget(self.console_output, 1, 1)
        self.console_output.setHidden(True)

        self.argtextbox.returnPressed.connect(self.on_enter_pressed_behavior)
        self.show()

    def on_enter_pressed_behavior(self):
        s.cust_print(self, ('  '))
        s.cust_print(self, ('====/====/====/'))
        s.cust_print(self, ('  '))
        lm.process_raw_input(self, self.argtextbox.text())
        self.argtextbox.clear()

    def release(self, event):
        # s.cust_print(self, 'press', event.key)
        # if event.key == 'x':
        #     s.cust_print(self, 'it was the X spot')
        pass

    def createVerticalGroupBox(self):
        self.verticalGroupBox = QGroupBox()

        layout = QHBoxLayout()
        for i in self.NumButtons:
            button = QPushButton(i)
            button.setObjectName(i)
            layout.addWidget(button)
            layout.setSpacing(10)
            self.verticalGroupBox.setLayout(layout)
            button.clicked.connect(lambda: (s.cust_print(self, str(self.sender().objectName())), self.submitCommand()))

    def submitCommand(self):
        eval('self.' + str(self.sender().objectName()) + '()')



    def center(self):
        qr = self.frameGeometry()
        cp = QDesktopWidget().availableGeometry().center()
        qr.moveCenter(cp)
        self.move(qr.topLeft())


if __name__ == '__main__':
    import sys

    app = QApplication(sys.argv)
    app.aboutToQuit.connect(app.deleteLater)
    app.setStyle(QStyleFactory.create("gtk"))
    screen = PrettyWidget()
    screen.show()
    sys.exit(app.exec_())
